#!/usr/bin/env perl

use strict;
use warnings;

@ARGV == 2 or die 'Usage: mysqldiff dbname1 dbname2';

my @tables = map {
    my $scheme;
    if (-e $_) {
        # file
# mysqlに投入してdumpしない
#       my $create_table = slurp($_);
#       my $tmp_dbname = join '_', 'tmp', time();
#       system(qw/mysqladmin -uroot create/, $tmp_dbname);
#       system('mysql', '-uroot', $tmp_dbname, '-e', $create_table);
#       my @cmd = (qw/mysqldump -uroot --no-data=true/, $tmp_dbname);
#       $scheme = `@cmd`;
#       system(qw/mysql -uroot/, $tmp_dbname, '-e', "drop database $tmp_dbname");
        $scheme = slurp($_);
    } elsif (/ /) {
        # remote db
        my @cmd = (qw/mysqldump --no-data=true/, split /\s+/, $_);
        $scheme = `@cmd`;
        my $tmp_dbname = join '_', 'tmp', time();
        system(qw/mysqladmin -uroot create/, $tmp_dbname);
        system('mysql', '-uroot', $tmp_dbname, '-e', $scheme);
        @cmd = (qw/mysqldump -uroot --no-data=true/, $tmp_dbname);
        $scheme = `@cmd`;
        system(qw/mysql -uroot/, $tmp_dbname, '-e', "drop database $tmp_dbname");
    } else {
        # local db
        my $dbname = $_;
        my @cmd = (qw/mysqldump -uroot --no-data=true/, $dbname);
        $scheme = `@cmd`;
    }
    parse($scheme);
} @ARGV;

print diff(@tables);

sub slurp {
    my $filename = shift;
    open my $fh, '<', $filename or die;
    my $res = do { local $/; <$fh> };
    close $fh;
    $res;
}

sub parse {
    my $tables = [];
    my $scheme = shift or return $tables;
    for ($scheme =~ /(CREATE TABLE .*? ENGINE[^;]*);/smg) {
        my $content = $_;
        $content =~ /`(.*?)`/ or next;
        my $table_name = $1;
        my ($columns, $unique_keys,  $keys, $primary_keys);
        for my $line (split /\n/, $content) {
            $line =~ /^CREATE/ and next;
            $line =~ /^\)/ and next;
            if ($line =~ /^\s*PRIMARY KEY\s+\((.*)\)/) {
                push @$primary_keys, $1;
            } elsif ($line =~ /^\s*UNIQUE KEY\s+`(.*)`\s+\((.*)\)/) {
                push @$unique_keys, {
                    name   => $1,
                    column => $2,
                };
            } elsif ($line =~ /^\s*KEY\s+`(.*)`\s+\((.*)\)/) {
                push @$keys, {
                    name   => $1,
                    column => $2,
                };
            } elsif ($line =~ /^\s*`(.*?)`\s+(.+?)[\n,]?$/) {
                push @$columns, {
                    column     => $1,
                    definition => $2,
                }
            }
        }
        push @$tables, {
            table_name   => $table_name,
            primary_keys => $primary_keys || [],
            unique_keys  => $unique_keys || [],
            keys         => $keys || [],
            columns      => $columns || [],
            content      => $content,
        };
    }
    return $tables;
}

sub diff {
    my ($old, $new) = @_;
    my $diff = '';
    my @old_table_names = sort map { $_->{table_name} } @$old;
    my @new_table_names = sort map { $_->{table_name} } @$new;
    my (%old_hash, %new_hash);
    for (@$old) {
        $old_hash{$_->{table_name}} = $_;
    }
    for (@$new) {
        $new_hash{$_->{table_name}} = $_;
    }
    for my $name (@old_table_names) {
        if (!$new_hash{$name}) {
            $diff .= "DROP TABLE IF EXISTS $name;\n\n";
        }
    }
    for my $name (@new_table_names) {
        if ($old_hash{$name}) {
            my $old_hash = $old_hash{$name};
            my $new_hash = $new_hash{$name};
            $diff .= table_diff($name, $old_hash, $new_hash);
        } else {
            $diff .= $new_hash{$name}->{content} . ";\n\n";
        }
    }

    return $diff;

}

sub table_diff {
    my ($name, $old, $new) = @_;
    my @change = grep {$_} (
        column_diff($old, $new),
        key_diff($old, $new),
    );
    @change or return '';
    return sprintf(
        "ALTER TABLE `%s` %s;\n\n",
        $name,
        join(",\n  ", @change),
    );
}

sub column_diff {
    my ($old, $new) = @_;
    my $old_columns = $old->{columns};
    my $new_columns = $new->{columns};
    my (@change, %old_hash, %new_hash, %drop_column);

    my $prev = 'FIRST';
    for (@$old_columns) {
        my $column_name = $_->{column};
        $_->{prev} = $prev;
        $old_hash{$column_name} = $_;
        $old_hash{$prev}->{next} = $column_name;
        $prev = $column_name;
    }
    $prev = 'FIRST';
    for (@$new_columns) {
        my $column_name = $_->{column};
        $_->{prev} = $prev;
        $new_hash{$column_name} = $_;
        $new_hash{$prev}->{next} = $column_name;
        $prev = $column_name;
    }

    # DROP 候補
    for (@$old_columns) {
        my $column = $_->{column};
        my $old_definition = $old_hash{$column}->{definition};
        my $new_definition = $new_hash{$column}->{definition};
        if (!$new_definition) {
            my $prev = $_->{prev};
            $drop_column{$column} = "$old_definition AFTER $prev";
        }
    }

    # ADD されるときにoldのDROP候補の中で
    # definitionと直前のカラム名が一致する場合
    # CHANGE(カラム名変更)にする
    for (@$new_columns) {
        my $column = $_->{column};
        my $old_definition = $old_hash{$column}->{definition};
        my $new_definition = $new_hash{$column}->{definition};
        my $new_prev = $new_hash{$column}->{prev};
        if (!$old_definition) {
            my $change_flag = 0;
            $new_definition .= " AFTER $new_prev";
            foreach my $key(keys(%drop_column)){
                if ($new_definition eq $drop_column{$key}) {
                    push @change, "CHANGE `$key` `$column` $new_definition";
                    $old_hash{$old_hash{$key}->{prev}}->{next} = $column;
                    $old_hash{$old_hash{$key}->{next}}->{prev} = $column;
                    delete($drop_column{$key});
                    $change_flag = 1;
                    last;
                }
            }
            if (!$change_flag) {
                push @change, "ADD `$column` $new_definition";
            }
        } elsif ($old_definition ne $new_definition) {
            push @change, "MODIFY `$column` $new_definition AFTER $new_prev";
        }
    }

    my @drop;
    foreach my $key(keys(%drop_column)){
        push @drop, "DROP `$key`";
    }

    return (@drop, @change);
}

sub key_diff {
    my ($old, $new) = @_;

    my @change;
    {# key
        my $old_keys = $old->{keys};
        my $new_keys = $new->{keys};
        my (%old_hash, %new_hash);
        for (@$old_keys) {
            $old_hash{$_->{column}} = 1;
        }
        for (@$new_keys) {
            $new_hash{$_->{column}} = 1;
        }
        # add key
        for my $key (@$new_keys) {
            $old_hash{$key->{column}} and next;
            my $name = join '_', map { s{[`()]}{}g; $_ } split /,/, $key->{column};
            push @change, "ADD INDEX `$name` ($key->{column})";
        }
        # drop key
        for my $key (@$old_keys) {
            $new_hash{$key->{column}} and next;
            push @change, "DROP INDEX `$key->{name}`";
        }
    };

    {# unique_key
        my $old_keys = $old->{unique_keys};
        my $new_keys = $new->{unique_keys};
        my (%old_hash, %new_hash);
        for (@$old_keys) {
            $old_hash{$_->{column}} = 1;
        }
        for (@$new_keys) {
            $new_hash{$_->{column}} = 1;
        }
        # add unique_key
        for my $key (@$new_keys) {
            $old_hash{$key->{column}} and next;
            my $name = join '_', map { s{[`()]}{}g; $_ } split /,/, $key->{column};
            push @change, "ADD UNIQUE INDEX `$name` ($key->{column})";
        }
        # drop unique_key
        for my $key (@$old_keys) {
            $new_hash{$key->{column}} and next;
            push @change, "DROP INDEX `$key->{name}`";
        }
    };

    return @change;
}

__END__

=head1 NAME

mysqldiff - diff for mysql

=head1 SYNOPSIS

  mysqldiff dbname1 dbname2
  mysqldiff '-uroot -hlocalhost dbname1' '-uroot -hlocalhost dbname2'
  mysqldiff createtable1.sql createtable2.sql

=cut

